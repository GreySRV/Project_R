http://localhost:5000/

=============

alembic init migrations # Создание структуры миграций
alembic revision --autogenerate -m "Migration Name" # Cоздание корневой миграции
alembic upgrade head # Применение миграции
alembic downgrade -1 # Откат последней миграции
rm -rf migrations/ # Сброс миграций

ls -la # Отображение всех файлов в папке, в том числе скрытых
nano .env # Редактура .env файла

=============

Добавление терминалу прав + перезагрузка
sudo usermod -aG docker $USER
newgrp docker

Построение и запуск компоуза
docker compose up --build -d

Проверка контейнеров
docker ps

Остановка сервера
docker compose down

Логи (если up с -d)
docker compose logs web

Зайти внутрь контейнера
docker compose exec web bash

Фласк шелл (питон окружение для контейнеров)
docker compose exec web flask --app app:create_app shell

=============

Получение токена во фласке

curl -X POST http://localhost:5000/auth/login \
     -H "Content-Type: application/json" \
     -d '{"login": "логин", "password": "пароль"}'

Юзеры:

tester
test1234

gamer
play4567

===============

Проверки:

Регистрация:
curl -X POST http://localhost:5000/auth/register \
  -H "Content-Type: application/json" \
  -d '{"login": "user1", "password": "pass123"}'

Вход\Получение токена:
curl -X POST http://localhost:5000/auth/login \
     -H "Content-Type: application/json" \
     -d '{"login": "testuser", "password": "5678"}'

Получить все объекты:
curl http://localhost:5000/objects/

Получить один объект: 
curl http://localhost:5000/objects/1

Создать объект:
curl -X POST http://localhost:5000/objects/ \
  -H "Authorization: Bearer <токен>" \
  -H "Content-Type: application/json" \
  -d '{"name": "Stardew Valley", "year": 2016, "description": "Farming sim", "genre_id": 1}'

Поставить оценку:
curl -X POST http://localhost:5000/ratings/ \
  -H "Authorization: Bearer <токен>" \
  -H "Content-Type: application/json" \
  -d '{"object_id": 1, "score": 8}'

Получить оценки:
curl -X GET http://localhost:5000/ratings/ \
  -H "Authorization: Bearer <ТОКЕН>"

Создать коллекцию:
curl -X POST http://localhost:5000/collections/ \
  -H "Authorization: Bearer <токен>" \
  -H "Content-Type: application/json" \
  -d '{"name": "Любимые"}'

Добавить объект в коллекцию:
curl -X POST http://localhost:5000/collections/1/add \
  -H "Authorization: Bearer <токен>" \
  -H "Content-Type: application/json" \
  -d '{"object_id": 2}'

Объекты по жанру:
curl http://localhost:5000/objects/genre/1

Получить все жанры:
curl http://localhost:5000/genres/

Создать жанр:
curl -X POST http://localhost:5000/genres/ \
     -H "Content-Type: application/json" \
     -H "Authorization: Bearer <ТОКЕН>" \
     -d '{"name": "RPG", "description": "Role-playing games"}'

Получить коллекции:
curl -X GET http://localhost:5000/collections/ \
  -H "Authorization: Bearer <ТОКЕН>"

Удалить коллекцию:
curl -X DELETE http://localhost:5000/collections/2 \
  -H "Authorization: Bearer <ТОКЕН>"

Удалить объект из коллекции:
curl -X DELETE http://localhost:5000/collections/2/remove \
  -H "Authorization: Bearer <ТОКЕН>" \
  -H "Content-Type: application/json" \
  -d '{"object_id": 2}'

Переименовать коллекцию:
curl -X PUT http://localhost:5000/collections/2 \
  -H "Authorization: Bearer <ТОКЕН>" \
  -H "Content-Type: application/json" \
  -d '{"name": "Избранные игры"}'

Добавить объект в коллекцию:
curl -X POST http://localhost:5000/collections/3/add \
  -H "Authorization: Bearer <ТОКЕН>" \
  -H "Content-Type: application/json" \
  -d '{"object_id": 2}'
  
===============

Добавление эл-тов через консоль (внутри фласк шела)

# Жанр
from app.models import Genre
from app.extensions import db

new_genre = Genre(name="ИМЯ", description="ОПИСАНИЕ")
db.session.add(new_genre)
db.session.commit()
print(f"Жанр добавлен с id = {new_genre.id}")

# Объект
from app.models import Object
from app.extensions import db

new_obj = Object(
    name="ИМЯ",
    year=ГОД,
    description="ОПИСАНИЕ",
    genre_id=АЙДИ_ЖАНРА
)
db.session.add(new_obj)
db.session.commit()
print(f"Объект добавлен с id = {new_obj.id}")

# Юзер
from app.models import Client
from app.extensions import db

client = Client(login="ЛОГИН")
client.set_password("ПАРОЛЬ")
db.session.add(client)
db.session.commit()
print(f"Клиент добавлен с id = {client.id}")

# Коллекция(к юзеру)
from app.models import Collection
from app.extensions import db

collection = Collection(name="НАЗВАНИЕ", client_id=АЙДИ_КЛИЕНТА)
db.session.add(collection)
db.session.commit()
print(f"Коллекция добавлена с id = {collection.id}")

# Объект к коллекции
from app.models import CollectionObject
from app.extensions import db

link = CollectionObject(collection_id=АЙДИ_КОЛЛЕКЦИИ, object_id=АЙДИ_ОБЪЕКТА)
db.session.add(link)
db.session.commit()
print("Объект добавлен в коллекцию")

# Оценка
from app.models import Rating
from app.extensions import db

rating = Rating(client_id=АЙДИ_КЛИЕНТА, object_id=АЙДИ_ОБЪЕКТА, rating=ОЦЕНКА)
db.session.add(rating)
db.session.commit()
print("Оценка добавлена")
